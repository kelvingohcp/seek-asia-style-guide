@import (reference) "~seek-asia-style-guide/theme";

@keyframes loading {
  to { width: @grid-gutter-width; }
}

.hoverState(@rules) {
  &:hover,
  &.rootHover {
    @rules();
  }
}

.activeState(@rules) {
  &:active,
  &.rootActive {
    @rules();
  }
}

.focusState(@rules) {
  &:focus,
  &.rootFocus {
    @rules();
  }
}

.buttonColor(@color, @background-color) {
  color: @color;
  background-color: @background-color;
  .hoverState({
    background-color: darken(@background-color, 5%);
  });
}

.inverseColor(@color, @background-color) {
  .buttonColor(@background-color, @color);
  border: 1px solid @background-color;
  line-height: @touchableTextHeight - 2px;

  &.compact {
    line-height: @compactTouchableTextHeight - 2px;
  }

  .hoverState({
    .buttonColor(@background-color, fade(@background-color, 10%));
    border: 1px solid transparent;
  });

  .activeState({
    .buttonColor(@color, @background-color);
  });
}

.root {
  .touchableText(@waving-type-scale);
  display: inline-block;
  text-decoration: none;
  user-select: none;
  text-align: center;
  padding: 0 @grid-base * 2;
  border: 0;
  border-radius: 3px;
  transition:
    background-color 0.2s,
    transform 0.2s cubic-bezier(0.02, 1.505, 0.745, 1.235);
  cursor: pointer;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  font-weight: bold;
  .activeState({
    outline: none;
  });
  .focusState({
    .focus();
    box-shadow:none;
  });
}

.compact {
  .compactTouchableText(@whistling-type-scale);
}

.disabled {
  .buttonColor(@saGrey5, @saGrey4);
  cursor: default;
}

.root_callToAction {
  .buttonColor(@saWhite, @saBlue);
}

.root_callToAction.root_isInverse {
  .inverseColor(@saWhite, @saBlue);
}

.jobStreet.root_callToAction {
  .buttonColor(@sk-black, @actionYellow);
}

.jobStreet.root_callToAction.root_isInverse {
  .inverseColor(@sk-black, @actionYellow);
}

.jobsDB.root_callToAction {
  .buttonColor(@saWhite, @actionOrange);
}

.jobsDB.root_callToAction.root_isInverse {
  .inverseColor(@saWhite, @actionOrange);
}

.root_hyperlink {
  .buttonColor(@saWhite, @actionBlue);
}

.root_hyperlink.root_isInverse {
  .inverseColor(@saWhite, @actionBlue);
}

.root_completion {
  .buttonColor(@saWhite, @actionGreen);
}

.root_completion.root_isInverse {
  .inverseColor(@saWhite, @actionGreen);
}

.root_alert {
  .buttonColor(@saWhite, @actionRed);
}

.root_alert.root_isInverse {
  .inverseColor(@saWhite, @actionRed);
}

.root_highlight {
  .buttonColor(@actionBlue, @actionPastelBlue);
}

.root_highlight.root_isInverse {
  .inverseColor(@actionBlue, @actionPastelBlue);
  border: 1px solid @actionBlue;
}

.root_isTransparent {
  .touchableText(@conversational-type-scale);
  color: @hyperlink;
  padding-left: 0;
  padding-right: 0;

  .hoverState({
    text-decoration: underline;
  });

  .activeState({
    transform: none;
  });
}

.root_isTransparent.compact {
  .compactTouchableText(@whispering-type-scale);
}

.loading {
  padding-right: @grid-gutter-width * 2;

  &::after {
    content: ' \2026';
    text-align: left;
    width: 0;
    overflow-x: hidden;
    display: inline-block;
    position: absolute;
    animation-duration: 0.8s;
    animation-name: loading;
    animation-iteration-count: infinite;
  }
}

.fullWidth {
  width: 100%;
}

.group {
  width: 100%;

  .root {
    vertical-align: top;
    @media only screen and (max-width: 500px) {
      width: 100%;
    }
    &:not(.root_isTransparent) {
      @media @mobile {
        padding-left: @grid-gutter-width * 2;
        padding-right: @grid-gutter-width * 2;
      }
    }
    & + .root {
      margin-left: @grid-gutter-width / 2;
      @media only screen and (max-width: 500px) {
        margin-top: @grid-row-height;
        margin-left: 0;
      }
    }
    & + .root_isTransparent {
      margin-left: @grid-gutter-width * 2;
      @media only screen and (max-width: 500px) {
        margin-left: 0;
      }
    }
  }
}
