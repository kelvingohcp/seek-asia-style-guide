// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Alert: levels: should render primary alerts 1`] = `
<Section
  className="root"
  header={false}
  level="primary"
  pullout={false}
  slim={false}
  tone="positive"
>
  <div
    className="alert"
  >
    <div
      className="alertContent"
    >
      <TickCircleIcon
        className="icon"
        filled={false}
      />
      <div
        className="text"
      >
        <Text
          baseline={false}
          intimate={false}
          raw={true}
        >
          Test message
        </Text>
      </div>
    </div>
  </div>
</Section>
`;

exports[`Alert: levels: should render secondary alerts 1`] = `
<Section
  className="root"
  header={false}
  level="secondary"
  pullout={false}
  slim={false}
  tone="positive"
>
  <div
    className="alert"
  >
    <div
      className="alertContent"
    >
      <TickCircleIcon
        className="icon"
        filled={false}
      />
      <div
        className="text"
      >
        <Text
          baseline={false}
          intimate={false}
          raw={true}
        >
          Test message
        </Text>
      </div>
    </div>
  </div>
</Section>
`;

exports[`Alert: levels: should render tertiary alerts 1`] = `
<div
  className="root positive"
>
  <div
    className="alert"
  >
    <div
      className="alertContent"
    >
      <TickCircleIcon
        className="icon"
        filled={false}
      />
      <div
        className="text"
      >
        <Text
          baseline={false}
          intimate={false}
          raw={true}
        >
          Test message
        </Text>
      </div>
    </div>
  </div>
</div>
`;

exports[`Alert: should pass through additional props 1`] = `
<Section
  className="root"
  custom-prop={true}
  header={false}
  level="primary"
  pullout={false}
  slim={false}
  tone="positive"
>
  <div
    className="alert"
  >
    <div
      className="alertContent"
    >
      <TickCircleIcon
        className="icon"
        filled={false}
      />
      <div
        className="text"
      >
        <Text
          baseline={false}
          intimate={false}
          raw={true}
        >
          Test message
        </Text>
      </div>
    </div>
  </div>
</Section>
`;

exports[`Alert: should render a close button 1`] = `
<Section
  className="root"
  header={false}
  level="primary"
  pullout={false}
  slim={false}
  tone="positive"
>
  <div
    className="alert"
  >
    <div
      className="alertContent"
    >
      <TickCircleIcon
        className="icon"
        filled={false}
      />
      <div
        className="text"
      >
        <Text
          baseline={false}
          intimate={false}
          raw={true}
        >
          Test message
        </Text>
      </div>
    </div>
    <button
      className="close"
      onClick={[Function]}
    >
      <Icon
        animation=""
        lineHeight=""
        rotation=""
        size="small"
        smoothRotate={false}
        type="exit"
      />
    </button>
  </div>
</Section>
`;

exports[`Alert: should render with a hidden icon 1`] = `
<Section
  className="root"
  header={false}
  level="primary"
  pullout={false}
  slim={false}
  tone="positive"
>
  <div
    className="alert"
  >
    <div
      className="alertContent"
    >
      <div
        className="text"
      >
        <Text
          baseline={false}
          intimate={false}
          raw={true}
        >
          Test message
        </Text>
      </div>
    </div>
  </div>
</Section>
`;

exports[`Alert: types: should render critical alerts 1`] = `
<Section
  className="root"
  header={false}
  level="primary"
  pullout={false}
  slim={false}
  tone="critical"
>
  <div
    className="alert"
  >
    <div
      className="alertContent"
    >
      <CriticalIcon
        className="icon"
      />
      <div
        className="text"
      >
        <Text
          baseline={false}
          intimate={false}
          raw={true}
        >
          Test message
        </Text>
      </div>
    </div>
  </div>
</Section>
`;

exports[`Alert: types: should render help alerts 1`] = `
<Section
  className="root"
  header={false}
  level="primary"
  pullout={false}
  slim={false}
  tone="help"
>
  <div
    className="alert"
  >
    <div
      className="alertContent"
    >
      <HelpIcon
        className="icon"
      />
      <div
        className="text"
      >
        <Text
          baseline={false}
          intimate={false}
          raw={true}
        >
          Test message
        </Text>
      </div>
    </div>
  </div>
</Section>
`;

exports[`Alert: types: should render info alerts 1`] = `
<Section
  className="root"
  header={false}
  level="primary"
  pullout={false}
  slim={false}
  tone="info"
>
  <div
    className="alert"
  >
    <div
      className="alertContent"
    >
      <InfoIcon
        className="icon"
      />
      <div
        className="text"
      >
        <Text
          baseline={false}
          intimate={false}
          raw={true}
        >
          Test message
        </Text>
      </div>
    </div>
  </div>
</Section>
`;

exports[`Alert: types: should render positive alerts 1`] = `
<Section
  className="root"
  header={false}
  level="primary"
  pullout={false}
  slim={false}
  tone="positive"
>
  <div
    className="alert"
  >
    <div
      className="alertContent"
    >
      <TickCircleIcon
        className="icon"
        filled={false}
      />
      <div
        className="text"
      >
        <Text
          baseline={false}
          intimate={false}
          raw={true}
        >
          Test message
        </Text>
      </div>
    </div>
  </div>
</Section>
`;

exports[`Alert: will accept a node in a the message prop 1`] = `
<Section
  className="root"
  header={false}
  level="primary"
  pullout={false}
  slim={false}
  tone="positive"
>
  <div
    className="alert"
  >
    <div
      className="alertContent"
    >
      <TickCircleIcon
        className="icon"
        filled={false}
      />
      <div
        className="text"
      >
        <Text
          baseline={false}
          intimate={false}
          raw={true}
        >
          <span>
            I'm a node
          </span>
        </Text>
      </div>
    </div>
  </div>
</Section>
`;
